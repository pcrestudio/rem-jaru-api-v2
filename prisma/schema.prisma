generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int        @id @default(autoincrement())
  firstName String     @db.VarChar(50)
  lastName  String     @db.VarChar(50)
  email     String     @db.VarChar(50)
  password  String     @db.VarChar(255)
  isActive  Boolean    @default(true)
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
  UserRole  UserRole[]

  secondaryResponsible JudicialProcess[] @relation("SecondaryResponsibleRelation")
  responsible          JudicialProcess[] @relation("ResponsibleRelation")
}

model Role {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(50)
  title       String     @db.VarChar(50)
  description String     @db.VarChar(255)
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt
  UserRole    UserRole[]
}

model UserRole {
  userId    Int
  roleId    Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model Module {
  id        Int         @id @default(autoincrement())
  name      String      @db.VarChar(50)
  isActive  Boolean     @default(true)
  order     Int
  slug      String      @default("") @db.VarChar(50)
  createdAt DateTime?   @default(now())
  updatedAt DateTime?   @updatedAt
  Submodule Submodule[]
  Master    Master[]
}

model Submodule {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(50)
  isActive  Boolean   @default(true)
  order     Int
  slug      String    @default("") @db.VarChar(50)
  moduleId  Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  module          Module            @relation(fields: [moduleId], references: [id])
  JudicialProcess JudicialProcess[]
}

model Master {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(50)
  slug         String?        @db.VarChar(50)
  createdAt    DateTime?      @default(now())
  updatedAt    DateTime?      @updatedAt
  isActive     Boolean        @default(true)
  moduleId     Int
  masterOption MasterOption[]

  module Module @relation(fields: [moduleId], references: [id])
}

model MasterOption {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(50)
  slug      String    @db.VarChar(50)
  masterId  Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  isActive  Boolean   @default(true)

  master           Master            @relation(fields: [masterId], references: [id])
  judicialProjects JudicialProcess[] @relation("ProjectRelation")
  judicialStudios  JudicialProcess[] @relation("StudioRelation")
}

model JudicialProcess {
  id                     Int       @id @default(autoincrement())
  fileCode               String    @db.VarChar(50)
  demanded               String    @db.VarChar(50)
  plaintiff              String    @db.VarChar(50)
  coDefendant            String    @db.VarChar(50)
  submoduleId            Int
  cargoStudioId          Int?
  projectId              Int?      @map("project_id")
  responsibleId          Int?      @map("responsible_id")
  secondaryResponsibleId Int?      @map("secondary_responsible_id")
  createdAt              DateTime? @default(now())
  updatedAt              DateTime? @updatedAt
  isActive               Boolean   @default(true)

  submodule            Submodule     @relation(fields: [submoduleId], references: [id])
  project              MasterOption? @relation("ProjectRelation", fields: [projectId], references: [id], map: "fk_project_id")
  studio               MasterOption? @relation("StudioRelation", fields: [cargoStudioId], references: [id], map: "fk_studio_id")
  responsible          User?         @relation("ResponsibleRelation", fields: [responsibleId], references: [id], map: "fk_responsible_id")
  secondaryResponsible User?         @relation("SecondaryResponsibleRelation", fields: [secondaryResponsibleId], references: [id], map: "fk_creator_id")
}
