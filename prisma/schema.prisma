generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum DataType {
  TEXT
  TEXTAREA
  INTEGER
  FLOAT
  DATE
  LIST
  FILE
  EMAIL
  BOOLEAN
}

enum RowLayout {
  single
  twoColumns
  threeColumns
}

model User {
  id        Int        @id @default(autoincrement())
  firstName String     @db.VarChar(50)
  lastName  String     @db.VarChar(50)
  email     String     @db.VarChar(50)
  password  String     @db.VarChar(255)
  isActive  Boolean    @default(true)
  createdAt DateTime?  @default(now())
  updatedAt DateTime?  @updatedAt
  UserRole  UserRole[]

  secondaryResponsible JudicialProcess[] @relation("SecondaryResponsibleRelation")
  responsible          JudicialProcess[] @relation("ResponsibleRelation")
}

model Role {
  id          Int        @id @default(autoincrement())
  name        String     @db.VarChar(50)
  title       String     @db.VarChar(50)
  description String     @db.VarChar(255)
  createdAt   DateTime?  @default(now())
  updatedAt   DateTime?  @updatedAt
  UserRole    UserRole[]
}

model UserRole {
  userId    Int
  roleId    Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@id([userId, roleId])
}

model Module {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(50)
  isActive         Boolean            @default(true)
  order            Int
  slug             String             @default("") @db.VarChar(50)
  createdAt        DateTime?          @default(now())
  updatedAt        DateTime?          @updatedAt
  Submodule        Submodule[]
  Master           Master[]
  SectionAttribute SectionAttribute[]
  Section          Section[]
}

model Submodule {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(50)
  isActive  Boolean   @default(true)
  order     Int
  slug      String    @default("") @db.VarChar(50)
  moduleId  Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt

  module           Module             @relation(fields: [moduleId], references: [id])
  JudicialProcess  JudicialProcess[]
  SectionAttribute SectionAttribute[]
  Section          Section[]
}

model Master {
  id           Int            @id @default(autoincrement())
  name         String         @db.VarChar(50)
  slug         String?        @db.VarChar(50)
  createdAt    DateTime?      @default(now())
  updatedAt    DateTime?      @updatedAt
  isActive     Boolean        @default(true)
  moduleId     Int
  masterOption MasterOption[]

  module Module @relation(fields: [moduleId], references: [id])
}

model MasterOption {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(50)
  slug      String    @db.VarChar(50)
  masterId  Int
  createdAt DateTime? @default(now())
  updatedAt DateTime? @updatedAt
  isActive  Boolean   @default(true)

  master           Master            @relation(fields: [masterId], references: [id])
  judicialProjects JudicialProcess[] @relation("ProjectRelation")
  judicialStudios  JudicialProcess[] @relation("StudioRelation")
}

model JudicialProcess {
  id                     Int       @id @default(autoincrement())
  fileCode               String    @db.VarChar(50)
  demanded               String    @db.VarChar(50)
  plaintiff              String    @db.VarChar(50)
  coDefendant            String    @db.VarChar(50)
  submoduleId            Int
  cargoStudioId          Int?
  projectId              Int?      @map("project_id")
  responsibleId          Int?      @map("responsible_id")
  secondaryResponsibleId Int?      @map("secondary_responsible_id")
  createdAt              DateTime? @default(now())
  updatedAt              DateTime? @updatedAt
  isActive               Boolean   @default(true)
  controversialMatter    String?   @default("")
  amount                 Float?    @default(0)

  submodule            Submodule     @relation(fields: [submoduleId], references: [id])
  project              MasterOption? @relation("ProjectRelation", fields: [projectId], references: [id], map: "fk_project_id")
  studio               MasterOption? @relation("StudioRelation", fields: [cargoStudioId], references: [id], map: "fk_studio_id")
  responsible          User?         @relation("ResponsibleRelation", fields: [responsibleId], references: [id], map: "fk_responsible_id")
  secondaryResponsible User?         @relation("SecondaryResponsibleRelation", fields: [secondaryResponsibleId], references: [id], map: "fk_creator_id")
}

model Section {
  sectionId   Int                @id @default(autoincrement())
  label       String
  order       Int
  collapsable Boolean
  isActive    Boolean?           @default(true)
  moduleId    Int?
  submoduleId Int?
  module      Module?            @relation(fields: [moduleId], references: [id])
  submodule   Submodule?         @relation(fields: [submoduleId], references: [id])
  attributes  SectionAttribute[]
}

model SectionAttribute {
  sectionAttributeId Int       @id @default(autoincrement())
  slug               String    @unique
  label              String
  sectionId          Int
  moduleId           Int?
  submoduleId        Int?
  order              Int
  dataType           DataType  @default(TEXT)
  rowLayout          RowLayout
  isActive           Boolean?  @default(true)
  isRequired         Boolean?  @default(true)

  section   Section                  @relation(fields: [sectionId], references: [sectionId])
  module    Module?                  @relation(fields: [moduleId], references: [id])
  submodule Submodule?               @relation(fields: [submoduleId], references: [id])
  options   SectionAttributeOption[]
  values    SectionAttributeValue[]
}

model SectionAttributeOption {
  sectionAttributeOptionId Int              @id @default(autoincrement())
  attributeId              Int
  optionLabel              String
  optionValue              String
  isActive                 Boolean          @default(true)
  attribute                SectionAttribute @relation(fields: [attributeId], references: [sectionAttributeId])
}

model SectionAttributeValue {
  sectionAttributeId Int
  value              String
  createdAt          DateTime         @default(now())
  modifiedAt         DateTime         @updatedAt
  createdBy          String
  modifiedBy         String
  attribute          SectionAttribute @relation(fields: [sectionAttributeId], references: [sectionAttributeId])

  @@id([sectionAttributeId, value])
}

model GlobalAttribute {
  globalAttributeId Int                     @id @default(autoincrement())
  slug              String                  @unique
  label             String
  dataType          DataType                @default(TEXT)
  order             Int
  rowLayout         RowLayout               @default(single)
  isActive          Boolean?                @default(true)
  options           GlobalAttributeOption[]
  values            GlobalAttributeValue[]
}

model GlobalAttributeOption {
  id                Int             @id @default(autoincrement())
  globalAttributeId Int
  optionLabel       String
  optionValue       String
  isActive          Boolean?        @default(true)
  attribute         GlobalAttribute @relation(fields: [globalAttributeId], references: [globalAttributeId])
}

model GlobalAttributeValue {
  globalAttributeId Int
  value             String
  createdAt         DateTime        @default(now())
  modifiedAt        DateTime        @updatedAt
  createdBy         String
  modifiedBy        String
  attribute         GlobalAttribute @relation(fields: [globalAttributeId], references: [globalAttributeId])

  @@id([globalAttributeId, value])
}
